var t=class t{static base64ToBytes(t){const r=atob(t);return Uint8Array.from(r,(t=>t.charCodeAt(0)))}static bytesToBase64(t){const r=String.fromCodePoint(...t);return btoa(r)}static isWellFormed(t){if("function"==typeof t.isWellFormed)return t.isWellFormed();try{return encodeURIComponent(t),!0}catch(t){return!1}}static encoder(r){if(t.isWellFormed(r))return t.bytesToBase64((new TextEncoder).encode(r));console.log(`Cannot process a string with lone surrogates: [${r}]`)}static decoder(r){if(t.isWellFormed(r))return(new TextDecoder).decode(t.base64ToBytes(r));console.log(`Cannot process a string with lone surrogates: [${r}]`)}static async fileIn64(t){const r=await t.arrayBuffer();return btoa(String.fromCharCode(...new Uint8Array(r)))}static toUnicode(t){return t.split("").map((t=>`\\u${t.charCodeAt(0).toString(16).padStart(4,"0")}`)).join("")}static toUnicodeSurrogates(t){return Array.from(t).map((t=>`\\u${t.codePointAt(0).toString(16).padStart(4,"0")}`)).join("")}static fromUnicode(t){return t.replace(/\\u([0-9a-fA-F]{4})/g,((t,r)=>String.fromCharCode(parseInt(r,16))))}static fromUnicodeSurrogates(t){return t.replace(/\\u([0-9a-fA-F]{4})/g,((t,r)=>String.fromCodePoint(parseInt(r,16))))}};export{t as XMorpher,t as XirGlyphMorpher};